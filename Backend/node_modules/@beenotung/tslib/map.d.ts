export declare function collectMap<K, V, A>(map: Map<K, V>, mapper: (v: V, k: K) => A): Map<A, V[]>;
export declare function mapToArray<K, V, A>(map: Map<K, V>, f: (v: V, k: K, map: Map<K, V>) => A): A[];
export declare function reduceMap<K, V, A>(map: Map<K, V>, mapper: (acc: A, v: V, k: K) => A, initial: A): A;
export declare function mapGetOrThrow<K, V>(map: Map<K, V>, key: K, message?: Error | string): V;
export declare function mapGetOrSetDefault<K, V>(map: Map<K, V>, key: K, f: () => V): V;
export declare function mapGetMap<K, V extends Map<any, any>>(map: Map<K, V>, key: K): V;
export declare function mapGetSet<K, V extends Set<any>>(map: Map<K, V>, key: K): V;
export declare function mapGetArray<K, V extends any[]>(map: Map<K, V>, key: K): V;
export declare function incMap<K>(map: Map<K, number>, key: K): void;
