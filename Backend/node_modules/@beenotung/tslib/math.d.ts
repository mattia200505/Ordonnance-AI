export declare function calcPhi(): number;
export declare const math: {
    phi: number;
};
export declare function gcd(a: number, b: number): number;
export declare function lcm(a: number, b: number): number;
/**
 * input: x
 * output: [a, b], where x = a/b
 * */
export declare function numberToFraction(x: number, error?: number): [number, number];
export declare const factorize: typeof numberToFraction;
export declare function simplifyFraction([a, b]: [number, number]): [number, number];
export declare function round(x: number, numberOfDecimal: number): number;
export declare function floor(x: number, numberOfDecimal: number): number;
export type Range = {
    lower: number;
    upper: number;
};
export type RangeResult = ReturnType<typeof compareRange>;
export declare function compareRange(a: Range, b: Range): {
    readonly overlap: number;
    readonly desc: "a contains b";
} | {
    readonly overlap: number;
    readonly desc: "b contains a";
} | {
    readonly overlap: number;
    readonly desc: "b contains a's lower";
} | {
    readonly overlap: number;
    readonly desc: "b contains a's upper";
} | {
    readonly overlap: -1;
    readonly desc: "b < a";
} | {
    readonly overlap: -1;
    readonly desc: "a < b";
};
