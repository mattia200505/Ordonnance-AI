"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MistralClient = void 0;
const mistralai_1 = require("@mistralai/mistralai");
const task_queue_1 = require("@beenotung/tslib/task/task-queue");
const wait_1 = require("@beenotung/tslib/async/wait");
class MistralClient {
    options;
    client;
    taskQueue = new task_queue_1.TaskQueue();
    lastTime = 0;
    rateLimitInterval = 1000;
    constructor(options) {
        this.options = options;
        this.client = new mistralai_1.Mistral({ apiKey: this.options.apiKey });
    }
    async waitForCoolDown() {
        let timePassed = Date.now() - this.lastTime;
        if (timePassed < this.rateLimitInterval) {
            await (0, wait_1.later)(this.rateLimitInterval - timePassed);
        }
        this.lastTime = Date.now();
    }
    /**
     * wrapper of this.complete()
     *
     * @example
     * ```typescript
     * let completion = await client.askAsync({
     *   model: 'mistral-large-latest',
     *   messages: [{ role: 'user', content: 'Introduce ts-liveview in zh-hk' }],
     * })
     * let content = completionContentToString(completion?.message.content)
     * console.log(content)
     * ```
     */
    async askAsync(request, options) {
        let completion = await this.complete(request, options);
        return completion.choices?.[0];
    }
    async complete(request, options) {
        await this.taskQueue.runTask(() => this.waitForCoolDown());
        return await this.client.chat.complete(request, options);
    }
    /**
     * @example
     * ```typescript
     * let stream = client.askInStream({
     *   model: 'mistral-large-latest',
     *   messages: [{ role: 'user', content: 'Introduce ts-liveview in zh-hk' }],
     * })
     * for await (let completion of stream) {
     *   let content = completionContentToString(completion.delta.content)
     *   process.stdout.write(content)
     * }
     * process.stdout.write('\n[end]\n')
     * ```
     */
    async *askInStream(request, options) {
        let stream = this.stream(request, options);
        for await (let completion of stream) {
            yield completion.data.choices?.[0];
        }
    }
    /** with rate limit throttling, return full completion response for custom usage */
    async *stream(request, options) {
        await this.taskQueue.runTask(() => this.waitForCoolDown());
        let stream = await this.client.chat.stream(request, options);
        for await (let completion of stream) {
            yield completion;
        }
    }
}
exports.MistralClient = MistralClient;
