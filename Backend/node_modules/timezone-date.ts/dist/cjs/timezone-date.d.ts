export declare class TimezoneDate implements Date {
    time: number;
    timezone: number;
    constructor(time?: number, o?: {
        timezone?: number;
    });
    toString(): string;
    toLocaleString(): string;
    toLocaleString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
    valueOf(): number;
    [Symbol.toPrimitive](hint: 'default'): string;
    [Symbol.toPrimitive](hint: 'string'): string;
    [Symbol.toPrimitive](hint: 'number'): number;
    [Symbol.toPrimitive](hint: string): string | number;
    toTimezoneOffsetDate(): Date;
    toDate(): Date;
    tunnelTimezoneOffsetDate(f: (offsetDate: Date) => void): number;
    getDate(): number;
    getDay(): number;
    getFullYear(): number;
    getHours(): number;
    getMilliseconds(): number;
    getMinutes(): number;
    getMonth(): number;
    getSeconds(): number;
    getTime(): number;
    getTimezoneOffset(): number;
    setTimezoneOffset(offset: number): void;
    getUTCDate(): number;
    getUTCDay(): number;
    getUTCFullYear(): number;
    getUTCHours(): number;
    getUTCMilliseconds(): number;
    getUTCMinutes(): number;
    getUTCMonth(): number;
    getUTCSeconds(): number;
    setDate(date: number): number;
    setFullYear(year: number, month?: number, date?: number): number;
    setHours(hours: number, min?: number, sec?: number, ms?: number): number;
    setMilliseconds(ms: number): number;
    setMinutes(min: number, sec?: number, ms?: number): number;
    setMonth(month: number, date?: number): number;
    setSeconds(sec: number, ms?: number): number;
    setTime(time: number): number;
    setUTCDate(date: number): number;
    setUTCFullYear(year: number, month?: number, date?: number): number;
    setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;
    setUTCMilliseconds(ms: number): number;
    setUTCMinutes(min: number, sec?: number, ms?: number): number;
    setUTCMonth(month: number, date?: number): number;
    setUTCSeconds(sec: number, ms?: number): number;
    toDateString(): string;
    toISOString(): string;
    toJSON(key?: any): string;
    clone(): TimezoneDate;
    toLocaleDateString(): string;
    toLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
    toLocaleTimeString(): string;
    toLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
    toTimeString(): string;
    toUTCString(): string;
    static fromTime(time: number): TimezoneDate;
    static fromDate(date: Date): TimezoneDate;
    static from(time: number | Date): TimezoneDate;
}
