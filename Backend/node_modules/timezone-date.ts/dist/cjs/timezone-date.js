"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MILLISECOND = 1;
const SECOND = MILLISECOND * 1000;
const MINUTE = SECOND * 60;
const HOUR = MINUTE * 60;
function fromDateTimezoneOffset(offset) {
    return -offset / 60;
}
class TimezoneDate {
    constructor(time = Date.now(), o) {
        this.time = time;
        const t = o === null || o === void 0 ? void 0 : o.timezone;
        this.timezone =
            typeof t === 'number'
                ? t
                : fromDateTimezoneOffset(new Date().getTimezoneOffset());
    }
    toString() {
        return this.toDate().toString();
    }
    toLocaleString(locales, options) {
        return this.toTimezoneOffsetDate().toLocaleString(locales, options);
    }
    valueOf() {
        return this.time;
    }
    [Symbol.toPrimitive](hint) {
        return this.toDate()[Symbol.toPrimitive](hint);
    }
    // for formatting
    toTimezoneOffsetDate() {
        let t = this.time;
        t += this.timezone * HOUR;
        t += new Date().getTimezoneOffset() * MINUTE;
        return new Date(t);
    }
    // convert to native Date object
    toDate() {
        return new Date(this.time);
    }
    // the delta change on time value will be applied to this object
    // return the new time value
    tunnelTimezoneOffsetDate(f) {
        const offsetDate = this.toTimezoneOffsetDate();
        const oldTime = offsetDate.getTime();
        f(offsetDate);
        const newTime = offsetDate.getTime();
        const diff = newTime - oldTime;
        this.time += diff;
        return this.time;
    }
    getDate() {
        return this.toTimezoneOffsetDate().getDate();
    }
    getDay() {
        return this.toTimezoneOffsetDate().getDay();
    }
    getFullYear() {
        return this.toTimezoneOffsetDate().getFullYear();
    }
    getHours() {
        return this.toTimezoneOffsetDate().getHours();
    }
    getMilliseconds() {
        return this.toTimezoneOffsetDate().getMilliseconds();
    }
    getMinutes() {
        return this.toTimezoneOffsetDate().getMinutes();
    }
    getMonth() {
        return this.toTimezoneOffsetDate().getMonth();
    }
    getSeconds() {
        return this.toTimezoneOffsetDate().getSeconds();
    }
    getTime() {
        return this.time;
    }
    getTimezoneOffset() {
        return this.timezone * -60;
    }
    setTimezoneOffset(offset) {
        this.timezone = fromDateTimezoneOffset(offset);
    }
    getUTCDate() {
        return this.toDate().getUTCDate();
    }
    getUTCDay() {
        return this.toDate().getUTCDay();
    }
    getUTCFullYear() {
        return this.toDate().getUTCFullYear();
    }
    getUTCHours() {
        return this.toDate().getUTCHours();
    }
    getUTCMilliseconds() {
        return this.toDate().getUTCMilliseconds();
    }
    getUTCMinutes() {
        return this.toDate().getUTCMinutes();
    }
    getUTCMonth() {
        return this.toDate().getUTCMonth();
    }
    getUTCSeconds() {
        return this.toDate().getUTCSeconds();
    }
    setDate(date) {
        return this.tunnelTimezoneOffsetDate(d => d.setDate(date));
    }
    setFullYear(year, ...args) {
        return this.tunnelTimezoneOffsetDate(d => d.setFullYear(year, ...args));
    }
    setHours(hours, ...args) {
        return this.tunnelTimezoneOffsetDate(d => d.setHours(hours, ...args));
    }
    setMilliseconds(ms) {
        return this.tunnelTimezoneOffsetDate(d => d.setMilliseconds(ms));
    }
    setMinutes(min, ...args) {
        return this.tunnelTimezoneOffsetDate(d => d.setMinutes(min, ...args));
    }
    setMonth(month, ...args) {
        return this.tunnelTimezoneOffsetDate(d => d.setMonth(month, ...args));
    }
    setSeconds(sec, ...args) {
        return this.tunnelTimezoneOffsetDate(d => d.setSeconds(sec, ...args));
    }
    setTime(time) {
        return (this.time = time);
    }
    setUTCDate(date) {
        return this.tunnelTimezoneOffsetDate(d => d.setUTCDate(date));
    }
    setUTCFullYear(year, month, date) {
        return this.tunnelTimezoneOffsetDate(d => d.setUTCFullYear(year, month, date));
    }
    setUTCHours(hours, min, sec, ms) {
        return this.tunnelTimezoneOffsetDate(d => d.setUTCHours(hours, min, sec, ms));
    }
    setUTCMilliseconds(ms) {
        return this.tunnelTimezoneOffsetDate(d => d.setUTCMilliseconds(ms));
    }
    setUTCMinutes(min, sec, ms) {
        return this.tunnelTimezoneOffsetDate(d => d.setUTCMinutes(min, sec, ms));
    }
    setUTCMonth(month, date) {
        return this.tunnelTimezoneOffsetDate(d => d.setUTCMonth(month, date));
    }
    setUTCSeconds(sec, ms) {
        return this.tunnelTimezoneOffsetDate(d => d.setUTCSeconds(sec, ms));
    }
    toDateString() {
        return this.toTimezoneOffsetDate().toDateString();
    }
    toISOString() {
        return this.toDate().toISOString();
    }
    toJSON(key) {
        return this.toDate().toJSON(key);
    }
    clone() {
        return new TimezoneDate(this.time, { timezone: this.timezone });
    }
    toLocaleDateString(locales, options) {
        return this.toTimezoneOffsetDate().toLocaleDateString(locales, options);
    }
    toLocaleTimeString(locales, options) {
        return this.toTimezoneOffsetDate().toLocaleTimeString(locales, options);
    }
    toTimeString() {
        return this.toTimezoneOffsetDate().toTimeString();
    }
    toUTCString() {
        return this.toDate().toUTCString();
    }
    static fromTime(time) {
        return new TimezoneDate(time);
    }
    static fromDate(date) {
        return new TimezoneDate(date.getTime(), {
            timezone: fromDateTimezoneOffset(date.getTimezoneOffset()),
        });
    }
    static from(time) {
        return typeof time === 'number' ? this.fromTime(time) : this.fromDate(time);
    }
}
exports.TimezoneDate = TimezoneDate;
